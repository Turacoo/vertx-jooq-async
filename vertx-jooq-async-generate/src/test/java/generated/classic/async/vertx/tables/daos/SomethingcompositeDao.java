/*
 * This file is generated by jOOQ.
*/
package generated.classic.async.vertx.tables.daos;


import generated.classic.async.vertx.tables.Somethingcomposite;
import generated.classic.async.vertx.tables.records.SomethingcompositeRecord;
import io.github.jklingsporn.vertx.jooq.async.classic.AsyncJooqSQLClient;
import io.github.jklingsporn.vertx.jooq.async.classic.VertxDAO;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonObject;
import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;

import javax.annotation.Generated;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SomethingcompositeDao extends DAOImpl<SomethingcompositeRecord, generated.classic.async.vertx.tables.pojos.Somethingcomposite, Record2<Integer, Integer>> implements VertxDAO<generated.classic.async.vertx.tables.records.SomethingcompositeRecord,generated.classic.async.vertx.tables.pojos.Somethingcomposite,org.jooq.Record2<java.lang.Integer, java.lang.Integer>> {

    /**
     * Create a new SomethingcompositeDao without any configuration
     */
    public SomethingcompositeDao() {
        super(Somethingcomposite.SOMETHINGCOMPOSITE, generated.classic.async.vertx.tables.pojos.Somethingcomposite.class);
    }

    /**
     * Create a new SomethingcompositeDao with an attached configuration
     */
    public SomethingcompositeDao(Configuration configuration) {
        super(Somethingcomposite.SOMETHINGCOMPOSITE, generated.classic.async.vertx.tables.pojos.Somethingcomposite.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Record2<Integer, Integer> getId(generated.classic.async.vertx.tables.pojos.Somethingcomposite object) {
        return compositeKeyRecord(object.getSomeid(), object.getSomesecondid());
    }

    /**
     * Fetch records that have <code>someId IN (values)</code>
     */
    public List<generated.classic.async.vertx.tables.pojos.Somethingcomposite> fetchBySomeid(Integer... values) {
        return fetch(Somethingcomposite.SOMETHINGCOMPOSITE.SOMEID, values);
    }

    /**
     * Fetch records that have <code>someSecondId IN (values)</code>
     */
    public List<generated.classic.async.vertx.tables.pojos.Somethingcomposite> fetchBySomesecondid(Integer... values) {
        return fetch(Somethingcomposite.SOMETHINGCOMPOSITE.SOMESECONDID, values);
    }

    /**
     * Fetch records that have <code>someJsonObject IN (values)</code>
     */
    public List<generated.classic.async.vertx.tables.pojos.Somethingcomposite> fetchBySomejsonobject(JsonObject... values) {
        return fetch(Somethingcomposite.SOMETHINGCOMPOSITE.SOMEJSONOBJECT, values);
    }

    /**
     * Fetch records that have <code>someId IN (values)</code> asynchronously
     */
    public void fetchBySomeidAsync(List<Integer> values,Handler<AsyncResult<List<generated.classic.async.vertx.tables.pojos.Somethingcomposite>>> resultHandler) {
        fetchAsync(Somethingcomposite.SOMETHINGCOMPOSITE.SOMEID,values,resultHandler);
    }

    /**
     * Fetch records that have <code>someSecondId IN (values)</code> asynchronously
     */
    public void fetchBySomesecondidAsync(List<Integer> values,Handler<AsyncResult<List<generated.classic.async.vertx.tables.pojos.Somethingcomposite>>> resultHandler) {
        fetchAsync(Somethingcomposite.SOMETHINGCOMPOSITE.SOMESECONDID,values,resultHandler);
    }

    /**
     * Fetch records that have <code>someJsonObject IN (values)</code> asynchronously
     */
    public void fetchBySomejsonobjectAsync(List<JsonObject> values,Handler<AsyncResult<List<generated.classic.async.vertx.tables.pojos.Somethingcomposite>>> resultHandler) {
        fetchAsync(Somethingcomposite.SOMETHINGCOMPOSITE.SOMEJSONOBJECT,values,resultHandler);
    }

    @Override
    public void insertReturningPrimaryAsync(generated.classic.async.vertx.tables.pojos.Somethingcomposite object, Handler<AsyncResult<org.jooq.Record2<java.lang.Integer, java.lang.Integer>>> resultHandler){
        throw new UnsupportedOperationException("More than one PK column");
    }


    private AsyncJooqSQLClient client;

    @Override
    public void setClient(AsyncJooqSQLClient client) {
        this.client = client;
    }

    @Override
    public AsyncJooqSQLClient client() {
        return this.client;
    }

    @Override
    public java.util.function.Function<io.vertx.core.json.JsonObject, generated.classic.async.vertx.tables.pojos.Somethingcomposite> jsonMapper() {
        return json -> 
            new generated.classic.async.vertx.tables.pojos.Somethingcomposite()
                    .setSomeid(json.getInteger("someId"))
                    .setSomesecondid(json.getInteger("someSecondId"))
                    .setSomejsonobject(io.github.jklingsporn.vertx.jooq.async.shared.JsonObjectConverter.getInstance().from(json.getString("someJsonObject")))
                    ;
    }

}
